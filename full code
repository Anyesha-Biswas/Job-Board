/** @jsxImportSource https://esm.sh/react@18.2.0 */
import React, { useState, useEffect } from "https://esm.sh/react@18.2.0";
import { createRoot } from "https://esm.sh/react-dom@18.2.0/client";

function JobBoard() {
  const [jobs, setJobs] = useState([]);
  const [newJob, setNewJob] = useState({
    title: '',
    company: '',
    description: '',
    location: '',
    salary: ''
  });
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    const response = await fetch('/jobs');
    const data = await response.json();
    setJobs(data);
  };

  const handleJobSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('/jobs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newJob)
    });
    
    if (response.ok) {
      fetchJobs();
      setNewJob({
        title: '',
        company: '',
        description: '',
        location: '',
        salary: ''
      });
    }
  };

  const handleApply = async (jobId) => {
    const response = await fetch(`/apply/${jobId}`, { method: 'POST' });
    if (response.ok) {
      alert('Application submitted successfully!');
    }
  };

  const filteredJobs = jobs.filter(job => 
    job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||
    job.location.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="job-board">
      <h1>üè¢ Job Board</h1>
      
      <div className="job-search">
        <input 
          type="text" 
          placeholder="Search jobs..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>

      <div className="job-posting-form">
        <h2>Post a Job</h2>
        <form onSubmit={handleJobSubmit}>
          <input 
            type="text" 
            placeholder="Job Title" 
            value={newJob.title}
            onChange={(e) => setNewJob({...newJob, title: e.target.value})}
            required 
          />
          <input 
            type="text" 
            placeholder="Company" 
            value={newJob.company}
            onChange={(e) => setNewJob({...newJob, company: e.target.value})}
            required 
          />
          <textarea 
            placeholder="Job Description"
            value={newJob.description}
            onChange={(e) => setNewJob({...newJob, description: e.target.value})}
            required 
          />
          <input 
            type="text" 
            placeholder="Location" 
            value={newJob.location}
            onChange={(e) => setNewJob({...newJob, location: e.target.value})}
            required 
          />
          <input 
            type="text" 
            placeholder="Salary" 
            value={newJob.salary}
            onChange={(e) => setNewJob({...newJob, salary: e.target.value})}
          />
          <button type="submit">Post Job</button>
        </form>
      </div>

      <div className="job-listings">
        <h2>Available Jobs</h2>
        {filteredJobs.map(job => (
          <div key={job.id} className="job-card">
            <h3>{job.title}</h3>
            <p><strong>Company:</strong> {job.company}</p>
            <p><strong>Location:</strong> {job.location}</p>
            <p><strong>Salary:</strong> {job.salary || 'Not specified'}</p>
            <p>{job.description}</p>
            <button onClick={() => handleApply(job.id)}>Apply Now</button>
          </div>
        ))}
      </div>
      
      <a 
        href={import.meta.url.replace("esm.town", "val.town")} 
        target="_top" 
        style={{ color: '#666', textDecoration: 'none', fontSize: '0.8em' }}
      >
        View Source
      </a>
    </div>
  );
}

function client() {
  createRoot(document.getElementById("root")).render(<JobBoard />);
}
if (typeof document !== "undefined") { client(); }

export default async function server(request: Request): Promise<Response> {
  const { sqlite } = await import("https://esm.town/v/stevekrouse/sqlite");
  const KEY = new URL(import.meta.url).pathname.split("/").at(-1);
  const SCHEMA_VERSION = 3;

  await sqlite.execute(`
    CREATE TABLE IF NOT EXISTS ${KEY}_jobs_${SCHEMA_VERSION} (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      company TEXT NOT NULL,
      description TEXT NOT NULL,
      location TEXT NOT NULL,
      salary TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  await sqlite.execute(`
    CREATE TABLE IF NOT EXISTS ${KEY}_applications_${SCHEMA_VERSION} (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      job_id INTEGER NOT NULL,
      applied_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY(job_id) REFERENCES ${KEY}_jobs_${SCHEMA_VERSION}(id)
    )
  `);

  if (request.method === 'GET' && new URL(request.url).pathname === '/jobs') {
    const jobs = await sqlite.execute(`SELECT * FROM ${KEY}_jobs_${SCHEMA_VERSION} ORDER BY created_at DESC`);
    return new Response(JSON.stringify(jobs.rows), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'POST' && new URL(request.url).pathname === '/jobs') {
    const jobData = await request.json();
    await sqlite.execute(`
      INSERT INTO ${KEY}_jobs_${SCHEMA_VERSION} 
      (title, company, description, location, salary) 
      VALUES (?, ?, ?, ?, ?)
    `, [
      jobData.title, 
      jobData.company, 
      jobData.description, 
      jobData.location, 
      jobData.salary
    ]);
    return new Response(JSON.stringify({ message: 'Job posted successfully' }), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'POST' && new URL(request.url).pathname.startsWith('/apply/')) {
    const jobId = new URL(request.url).pathname.split('/').pop();
    await sqlite.execute(`
      INSERT INTO ${KEY}_applications_${SCHEMA_VERSION} (job_id) VALUES (?)
    `, [jobId]);
    return new Response(JSON.stringify({ message: 'Application submitted' }), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  return new Response(`
    <html>
      <head>
        <title>Job Board</title>
        <style>${css}</style>
      </head>
      <body>
        <div id="root"></div>
        <script src="https://esm.town/v/std/catch"></script>
        <script type="module" src="${import.meta.url}"></script>
      </body>
    </html>
  `, {
    headers: { 'Content-Type': 'text/html' }
  });
}

const css = `
body {
  font-family: 'Arial', sans-serif;
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f4f4f4;
}

.job-board {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.job-search input {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.job-posting-form {
  background-color: #f9f9f9;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.job-posting-form input, 
.job-posting-form textarea {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.job-card {
  background-color: white;
  border: 1px solid #eee;
  padding: 15px;
  margin-bottom: 15px;
  border-radius: 6px;
}

button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 15px;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}
`;
